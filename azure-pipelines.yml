trigger:
  - main

pool:
  name: Default

variables:
  acrurl: 'lavender.azurecr.io'
  dockerRegistryServiceConnection: 'ACR-Docker-Connection'  # Nouvelle connection Docker
  kubernetesServiceConnection: 'K8S_SERVICE_CONNECTION'
  namespace: 'default'
  releaseName: 'sampleapi-release'

stages:
- stage: Build
  jobs:
  - job: BuildAndPush
    steps:
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: 'sampleapi'
        command: 'buildAndPush'
        Dockerfile: 'Dockerfile'
        tags: '$(Build.BuildId)'

- stage: Deploy
  jobs:
  - job: HelmDeploy
    steps:
    - task: HelmInstaller@1
      displayName: 'Install Helm'
      inputs:
        helmVersionToInstall: 'latest'

    - task: AzureCLI@2
      displayName: 'Authenticate and Set kubectl Context'
      inputs:
        azureSubscription: $(kubernetesServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az account set --subscription 095846c3-8075-4879-a286-8172117c2260
          az aks get-credentials --resource-group K8S_RG --name MyAKSCluster
          kubectl config set-context --current --namespace=$(namespace)

    - task: HelmDeploy@1
      displayName: 'Package Helm Chart'
      inputs:
        azureSubscriptionForACR: $(kubernetesServiceConnection)
        azureResourceGroupForACR: 'K8S_RG'
        azureContainerRegistry: $(acrurl)
        command: package
        chartPath: 'helm'
        destination: '$(Build.ArtifactStagingDirectory)/helm'
        chartVersion: '$(Build.BuildId)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Helm Chart'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/helm'
        artifact: 'helm-chart'

    - task: HelmDeploy@0
      displayName: 'Deploy to Kubernetes'
      inputs:
        azureSubscription: $(kubernetesServiceConnection)
        azureResourceGroup: 'K8S_RG'
        kubernetesCluster: 'MyAKSCluster'
        namespace: $(namespace)
        command: upgrade
        chartType: FilePath
        chartPath: '$(Build.ArtifactStagingDirectory)/helm/nodesampleapi-$(Build.BuildId).tgz'
        releaseName: $(releaseName)
        install: true
        timeoutInMinutes: 15
        overrideValues: |
          image.repository=$(acrurl)/sampleapi
          image.tag=$(Build.BuildId)
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi

    - bash: |
        kubectl cluster-info
        kubectl get nodes
        kubectl get events -n $(namespace)
        kubectl describe deployment $(releaseName)-nodesampleapi -n $(namespace)
      displayName: 'Kubernetes Diagnostic'
      condition: failed()
      continueOnError: true

    - task: HelmDeploy@0
      displayName: 'Rollback on Critical Failure'
      condition: failed()
      inputs:
        azureSubscription: $(kubernetesServiceConnection)
        azureResourceGroup: 'K8S_RG'
        kubernetesCluster: 'MyAKSCluster'
        namespace: $(namespace)
        command: rollback
        releaseName: $(releaseName)
        revision: 0