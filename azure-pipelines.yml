trigger:
- main  # Déclenche le pipeline sur des commits dans la branche `main`

pool:
  name: Default

variables:
  acrurl: 'lavender.azurecr.io'  # URL du registre ACR
  kubernetesServiceConnection: 'K8S_SERVICE_CONNECTION'  # Service Connection pour Kubernetes
  namespace: 'default'  # Namespace Kubernetes
  releaseName: 'sampleapi-release'  # Nom du release Helm

steps:
# Étape 1 : Construire et pousser l'image Docker
- task: Docker@0
  displayName: 'Build Docker Image'
  inputs:
    azureSubscription: $(kubernetesServiceConnection)
    azureContainerRegistry: '{"loginServer":"$(acrurl)", "id" : "/subscriptions/..."}'
    imageName: '$(acrurl)/sampleapi:$(Build.BuildId)'

- task: Docker@0
  displayName: 'Push Docker Image to ACR'
  inputs:
    azureSubscription: $(kubernetesServiceConnection)
    azureContainerRegistry: '{"loginServer":"$(acrurl)", "id" : "/subscriptions/..."}'
    imageName: '$(acrurl)/sampleapi:$(Build.BuildId)'

# Étape 2 : Installer Helm
- task: HelmInstaller@1
  displayName: 'Install Helm'

# Étape 3 : Empaqueter le chart Helm
- task: HelmDeploy@1
  displayName: 'Package Helm Chart'
  inputs:
    azureSubscriptionForACR: $(kubernetesServiceConnection)
    azureResourceGroupForACR: 'K8S_RG'
    azureContainerRegistry: $(acrurl)
    command: package
    chartPath: helm  # Répertoire contenant le chart Helm
    destination: 'C:\Users\hp\Desktop\NodeApp\helm'  # Répertoire de sortie pour le fichier `.tgz`
    chartVersion: '$(Build.BuildId)'

# Étape 4 : Vérifier le contenu du chart Helm empaqueté
- script: |
    echo "Listing contents of Artifact Staging Directory:"
    dir "$(Build.ArtifactStagingDirectory)/helm"
  displayName: 'Debug: List Artifact Staging Directory'


# Étape 5 : Publier le chart Helm comme artefact
- task: PublishPipelineArtifact@1
  displayName: 'Publish Helm Chart as Artifact'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/helm/*.tgz'
    artifact: 'helm-chart'

# Étape 6 : Téléchargement et déploiement avec Helm
- task: DownloadPipelineArtifact@2
  displayName: 'Download Helm Chart Artifact'
  inputs:
    artifact: 'helm-chart'
    path: '$(System.ArtifactsDirectory)/helm'

- script: |
    echo "Listing downloaded Helm Chart files:"
    ls -la $(System.ArtifactsDirectory)/helm
  displayName: 'Verify Downloaded Helm Chart'

# Étape 7 : Déployer sur Kubernetes avec Helm
- task: HelmDeploy@0
  displayName: 'Deploy to Kubernetes'
  inputs:
    azureSubscription: $(kubernetesServiceConnection)
    azureResourceGroup: 'K8S_RG'
    kubernetesCluster: 'MyAKSCluster'
    namespace: $(namespace)
    command: upgrade
    chartType: FilePath
    chartPath: '$(System.ArtifactsDirectory)/helm/nodesampleapi-*.tgz'
    releaseName: $(releaseName)
    overrideValues: |
      image.repository=$(acrurl)/sampleapi
      image.tag=$(Build.BuildId)
    install: true

# Étape 8 : Rollback en cas d’échec
- task: HelmDeploy@0
  displayName: 'Rollback on Failure'
  condition: failed()  # S'exécute uniquement si une étape précédente échoue
  inputs:
    azureSubscription: $(kubernetesServiceConnection)
    azureResourceGroup: 'K8S_RG'
    kubernetesCluster: 'MyAKSCluster'
    namespace: $(namespace)
    command: rollback
    releaseName: $(releaseName)
